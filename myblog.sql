/*
 Navicat Premium Data Transfer

 Source Server         : myBlog
 Source Server Type    : MySQL
 Source Server Version : 50717
 Source Host           : localhost:3306
 Source Schema         : myblog

 Target Server Type    : MySQL
 Target Server Version : 50717
 File Encoding         : 65001

 Date: 20/01/2021 09:11:52
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for articles
-- ----------------------------
DROP TABLE IF EXISTS `articles`;
CREATE TABLE `articles`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `state` tinyint(2) NULL DEFAULT NULL,
  `type` tinyint(2) NULL DEFAULT NULL,
  `loadURL` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `summary` varchar(10000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `post_time` bigint(20) NOT NULL,
  `upd_time` bigint(20) NULL DEFAULT NULL,
  `view` bigint(20) NOT NULL,
  `start` bigint(20) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 55 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of articles
-- ----------------------------
INSERT INTO `articles` VALUES (33, 8024, 'text', 1, 1, '*', '<p>1</p>\n\n<p>......</p>', 1610329543422, NULL, 0, 0);
INSERT INTO `articles` VALUES (34, 8024, '解决vue的dblclick双击事件不能触发的问题', 1, 1, '*', '<pre><code><span class=\"hljs-comment\">//模拟双击事件(双击事件dblclick不支持)</span>\nvar touchtime = <span class=\"hljs-number\">0</span>;\nmap.add<span class=\"hljs-constructor\">EventListener(<span class=\"hljs-string\">\"touchend\"</span>, <span class=\"hljs-params\">function</span>(<span class=\"hljs-params\">e</span>)</span> { <span class=\"hljs-comment\">//touchend触摸结束时触发此事件</span>\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> == </span>touchtime) {\ntouchtime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>.get<span class=\"hljs-constructor\">Time()</span>;\n} <span class=\"hljs-keyword\">else</span> {\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>.get<span class=\"hljs-constructor\">Time()</span> - touchtime &lt; <span class=\"hljs-number\">800</span>) {\nsearch<span class=\"hljs-constructor\">Nearby(<span class=\"hljs-params\">e</span>)</span>;\n} <span class=\"hljs-keyword\">else</span> {\n<span class=\"hljs-comment\">//如果第二次点击在第一次点击0.8秒后，</span>\n<span class=\"hljs-comment\">//则第二次点击默认为下一次双击判断的第一次点击</span>\ntouchtime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>.get<span class=\"hljs-constructor\">Time()</span>;\n}\n}\n});</code></pre>\n<p>......</p>', 1610349696972, NULL, 0, 0);
INSERT INTO `articles` VALUES (35, 8024, 'vue移动端绑定click事件失效问题', 1, 1, '*', '<pre><code>原因可能是你使用了better-scroll，默认它会阻止touch事件。所以在配置中需要加上click: <span class=\"hljs-keyword\">true</span>\n例：\nmounted(){\nthis.scroll=<span class=\"hljs-built_in\">new</span> Bscroll(this.$refs.<span class=\"hljs-keyword\">wrapper</span>, { mouseWheel: <span class=\"hljs-keyword\">true</span>, click: <span class=\"hljs-keyword\">true</span>, tap: <span class=\"hljs-keyword\">true</span> })\n}</code></pre>\n<p>......</p>', 1610349762240, NULL, 0, 0);
INSERT INTO `articles` VALUES (36, 8024, 'nodejs学习笔记-简单http请求', 1, 1, '*', '<pre><code><span class=\"hljs-number\">1.</span>使用http模块创建一个简单的服务器\n<span class=\"hljs-comment\">//引用模块</span>\n<span class=\"hljs-keyword\">var</span> http=<span class=\"hljs-built_in\">require</span>(“http”);\n<span class=\"hljs-comment\">//创建服务</span>\nhttp.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\n<span class=\"hljs-comment\">//创建服务</span>\n\n             res.end(“hello world”);\n\n             <span class=\"hljs-comment\">//向用户写入</span>\n\n}).listen(<span class=\"hljs-number\">80</span>);\n<span class=\"hljs-comment\">//监听80端口</span></code></pre>\n<p>......</p>', 1610350479730, NULL, 0, 0);
INSERT INTO `articles` VALUES (37, 8024, 'nodejs-文件系统', 1, 1, '*', '<pre><code>读取文件\nreadFile(文件名，回调函数)\n文件名：路径\n回调函数：<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err,data)</span></span>{}\nerr：错误汇报\n<span class=\"hljs-keyword\">data</span>：读取信息\n写文件\nwriteFile(文件名，写入的数据，回调函数)\n文件名：文件路径\n写入数据：写入的数据\n回调函数：<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{}\nerr：写入错误。\n修改文件名\nrename(原文件名,新文件名,回调函数);\n回调函数：<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{}\nerr：返回错误。</code></pre>\n<p>......</p>', 1610350547645, NULL, 0, 0);
INSERT INTO `articles` VALUES (38, 8024, 'nodejs-请求方式', 1, 1, '*', '<pre><code>![](https:<span class=\"hljs-regexp\">//</span>blog.csdn.net<span class=\"hljs-regexp\">/weixin_41568562/</span>article<span class=\"hljs-regexp\">/details/</span><span class=\"hljs-number\">81588146</span>)</code></pre>\n<p>......</p>', 1610350610471, 1610350660327, 0, 0);
INSERT INTO `articles` VALUES (39, 8024, 'nodejs-get数据拆分', 1, 1, '*', '<pre><code>querystring模块\nquerystring.parse(<span class=\"hljs-built_in\">get</span>数据)\n将<span class=\"hljs-built_in\">get</span>数据转换成josn数据\nurl模块（推荐）\nurl.parse(地址,选项)\n将<span class=\"hljs-keyword\">http</span>地址完全解析\n选项：\n<span class=\"hljs-literal\">true</span>：解析query数据\n<span class=\"hljs-literal\">false</span>：不进行query解析</code></pre>\n<p>......</p>', 1610350712637, NULL, 0, 0);
INSERT INTO `articles` VALUES (40, 8024, 'nodejs-post数据处理', 1, 1, '*', '<pre><code>GET与POST区别\n<span class=\"hljs-built_in\">post</span>数据很大：分段发送。<span class=\"hljs-number\">1</span>G\n<span class=\"hljs-built_in\">get</span>数据很小：一次发生。<span class=\"hljs-number\">32</span>K\n<span class=\"hljs-built_in\">post</span>处理\nreq.<span class=\"hljs-keyword\">on</span>(标识,回调函数)\n标识（字符串）：\n‘data’：多次接受数据。\n‘<span class=\"hljs-keyword\">end</span>’：表示数据传输完成。\n回调函数\ndata：<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-title\">dat</span>{}</span>\n注意：需要找个临时变量存储data。\n<span class=\"hljs-keyword\">end</span>：<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(){}</span>\n注意：传输结束。</code></pre>\n<p>......</p>', 1610350757948, NULL, 0, 0);
INSERT INTO `articles` VALUES (41, 8024, 'http url 模块', 1, 1, '*', '<pre><code>var http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'http\'</span>);\nvar url=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'url\'</span>);\n\nhttp.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(req,res)</span></span>{\n        res.writeHead(<span class=\"hljs-number\">200</span>,{<span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"text/html;charset=utf-8\"</span>});\nvar str=<span class=\"hljs-string\">\'&lt;ul&gt;\'</span>;\n<span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">10</span>;i++){\n    str+=<span class=\"hljs-string\">\'&lt;li&gt;\'</span>+i+<span class=\"hljs-string\">\'&lt;/li&gt;\'</span>;\n}\nstr+=<span class=\"hljs-string\">\'&lt;/ul&gt;\'</span>;\nres.<span class=\"hljs-built_in\">write</span>(str);\n<span class=\"hljs-keyword\">if</span>(req.url.indexOf(<span class=\"hljs-string\">\'favicon.ico\'</span>) == <span class=\"hljs-number\">-1</span>){\n    var result=url.parse(req.url,<span class=\"hljs-literal\">true</span>);\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">\'aid=\'</span>+result.query.aid)\n}\n\nres.<span class=\"hljs-keyword\">end</span>();\n}).listen(<span class=\"hljs-number\">9999</span>);\n/*\n调试流程：\n写好页面之后cd到该文件目录，node server.js就能运行，但是每次修改都需要再次运行很麻烦，可以全局安装一个插\n件，自动刷新\nnpm install -g supervisor\ncd到文件目录 supervisor server.js\nctrl+c 停止进程\n\nhttp模块\nhttp模块node本身自带，利用createServer方法可以创建http服务器，带两个参数，req是请求参数，res是返回参数，\nres.<span class=\"hljs-built_in\">write</span>写入内容，res.<span class=\"hljs-keyword\">end</span>()结束响应\n每次浏览器访问会有两个请求一次是访问页面一次是获取favicon.ico图标，因此需要通过req中的url进行判断，如果\n是后者则不打印信息，否则控制台会打印两次\n\nurl模块\nurl模块也是node自带，有三个方法:\nurl.parse(url,<span class=\"hljs-literal\">true</span>) 可以把请求地址转化为对象，后面的<span class=\"hljs-literal\">true</span>可以把query参数的内容转化为对象\nurl.<span class=\"hljs-built_in\">format</span>(urlObject) 与parse()正好相反，会把含有请求地址的对象转化为网址\nurl.resolve(<span class=\"hljs-string\">\'http://www.baidu.com\'</span>,<span class=\"hljs-string\">\'news\'</span>) 替换路径,输出 http://www.baidu.com/news\n如果地址本身自带二级目录会被覆盖http://www.baidu.com/nav -&gt; http://www.baidu.com/news\n*/</code></pre>\n<p>......</p>', 1610350923354, NULL, 0, 0);
INSERT INTO `articles` VALUES (42, 8024, '自定义模块', 1, 1, '*', '<pre><code><span class=\"hljs-comment\">//tools.js</span>\n<span class=\"hljs-keyword\">var</span> tools={\n<span class=\"hljs-attr\">add</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x,y</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> x+y;\n},\n<span class=\"hljs-attr\">sayHello</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'你好，nodejs\'</span>;\n}\n};\n<span class=\"hljs-comment\">// exports.tools=tools;</span>\n<span class=\"hljs-built_in\">module</span>.exports=tools;\n<span class=\"hljs-comment\">//common1.js</span>\n<span class=\"hljs-keyword\">var</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'http\'</span>);\n<span class=\"hljs-keyword\">var</span> tools=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'./tools\'</span>);\n<span class=\"hljs-comment\">//如果foo.js不在根目录下会自动在node_modules文件夹下面找</span>\n<span class=\"hljs-keyword\">var</span> foo=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'foo\'</span>);\n<span class=\"hljs-comment\">//如果bar.js在node_modules下的bar文件夹下就需要bar/bar这样写，如果有package.json文件就可以省略</span>\n<span class=\"hljs-keyword\">var</span> bar=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'bar\'</span>);\n\nhttp.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\nres.writeHead(<span class=\"hljs-number\">200</span>,{<span class=\"hljs-string\">\'Content-Type\'</span>:<span class=\"hljs-string\">\'text/html;charset=utf-8\'</span>});\nres.write(<span class=\"hljs-string\">\'你好，nodejs\'</span>);\n<span class=\"hljs-keyword\">if</span>(req.url.indexOf(<span class=\"hljs-string\">\'favico\'</span>) == <span class=\"hljs-number\">-1</span>){\n    <span class=\"hljs-keyword\">var</span> sum=tools.add(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">16</span>);\n    <span class=\"hljs-built_in\">console</span>.log(sum)\n    <span class=\"hljs-built_in\">console</span>.log(bar.str)\n}\nres.end();\n}).listen(<span class=\"hljs-number\">9998</span>);\n\n<span class=\"hljs-comment\">/*\n在commonjs规范下引入模块，自定义模块\n通过require引入，根目录下使用./找到文件，不在根目录下的文件会自动从node_modules文件夹内寻找，\nnode_modules下面还有文件夹怎么办？cd到那个文件夹（本例是bar）\n输入npm init --yes会自动生成一个package.json文件，里面的main是入口文件，有了这个json文件就不需要根据\n目录找寻存放在node_modules下多级文件夹下的文件，require的时候直接把文件夹的名字写入就可以\n\n暴露模块\nexports foo=foo;使用的时候会多一层对象,例如tools.tools.add()\nmodule.exports=foo;可以直接找到模块内的变量或者函数例如tools.add()</span></code></pre><p>*/</p>\n\n<p>......</p>', 1610351016218, NULL, 0, 0);
INSERT INTO `articles` VALUES (43, 8024, 'NODE', 0, 1, '*', '<p>NODE</p>\n\n<p>......</p>', 1610351916631, NULL, 0, 0);
INSERT INTO `articles` VALUES (44, 8024, 'fs模块--文件流', 1, 1, '*', '<pre><code><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);\n<span class=\"hljs-keyword\">var</span> reradStream = fs.createReadStream(<span class=\"hljs-string\">\"input.txt\"</span>);\n<span class=\"hljs-keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"hljs-string\">\"output.txt\"</span>);\n<span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-string\">\"我是从数据库获取的数据，我要保存起来11\n\"</span>;\n\n<span class=\"hljs-comment\">// 读取文件流</span>\n<span class=\"hljs-keyword\">var</span> str=<span class=\"hljs-string\">\"\"</span>;\n<span class=\"hljs-keyword\">var</span> count=<span class=\"hljs-number\">0</span>;\nreradStream.on(<span class=\"hljs-string\">\"data\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">chunk</span>)</span>{\nstr+=chunk;\ncount++;\n})\nreradStream.on(<span class=\"hljs-string\">\"end\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">chunk</span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(str)\n<span class=\"hljs-built_in\">console</span>.log(count)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"读取完成\"</span>)\n})\n\nreradStream.on(<span class=\"hljs-string\">\"error\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(error)\n})\n\n<span class=\"hljs-comment\">// 写入文件流</span>\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++){\nwriterStream.write(data,<span class=\"hljs-string\">\"utf8\"</span>);\n}\n\n<span class=\"hljs-comment\">//标记写入完成</span>\nwriterStream.end();\nwriterStream.on(<span class=\"hljs-string\">\"finish\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"写入完成111\"</span>);\n});\n\n<span class=\"hljs-comment\">//失败</span>\nwriterStream.on(<span class=\"hljs-string\">\"error\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"写入失败\"</span>);\n});\n\n<span class=\"hljs-comment\">// 管道</span>\nreradStream.pipe(writerStream);\n\n<span class=\"hljs-comment\">/*\nfs.createReadStream(\"fileName\")创建文件流读取对象\n用on接受广播：\ndata:分片读取；\nend:读取结束\nerror:错误信息\n\nfs.createWriteStream(\"fileName\")创建文件流写入对象\n.end():标记文件末尾\n用on接受广播\nfinish:写入结束\nerror：写入错误\n\n管道pipe()\nreradStream.pipe(writerStream)，读取后可直接写入\n\n*/</span></code></pre>\n<p>......</p>', 1610351949726, 1610352012948, 0, 0);
INSERT INTO `articles` VALUES (45, 8024, '创建一个静态WEB服务器', 1, 1, '*', '<pre><code><span class=\"hljs-number\">1</span>、地址栏输入地址能够访问页面\n<span class=\"hljs-number\">2</span>、css、js加载正确并起作用（设置其正确的content-type类型）\n<span class=\"hljs-number\">3</span>、不存在的页面跳转到<span class=\"hljs-number\">404</span>页面\nexports.setMime=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">extname</span>)</span>{\n<span class=\"hljs-keyword\">switch</span> (extname) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'.html\'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'text/html\'</span>\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'.css\'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'text/css\'</span>\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'.js\'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'text/javascript\'</span>\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'.jpg\'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'image/jpg\'</span>\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'.png\'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'image/png\'</span>\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'.gif\'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'image/gif\'</span>\n        <span class=\"hljs-keyword\">break</span>;\n        }\n}\n<span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'http\'</span>);\n<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'fs\'</span>);\n<span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'path\'</span>);\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">url</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'url\'</span>);\n<span class=\"hljs-keyword\">var</span> mime=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'./module/setMime\'</span>);<span class=\"hljs-comment\">//自定义模块，根据文件类型返回mime类型</span>\n\nhttp.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{\n<span class=\"hljs-keyword\">if</span>(req.url.indexOf(<span class=\"hljs-string\">\'favicon\'</span>) != <span class=\"hljs-number\">-1</span>){\n    res.end();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> pathName=<span class=\"hljs-built_in\">url</span>.parse(req.url).pathname;<span class=\"hljs-comment\">///index.html?1123，使用url模块获取干净的地址路径</span>\n<span class=\"hljs-keyword\">var</span> extname=path.extname(pathName);<span class=\"hljs-comment\">//使用path模块获取访问页面的后缀类型</span>\n<span class=\"hljs-keyword\">if</span>(pathName == <span class=\"hljs-string\">\'/\'</span>){<span class=\"hljs-comment\">//默认跳转到index.html页面</span>\n    pathName=<span class=\"hljs-string\">\'/index.html\'</span>;    \n}\n\n<span class=\"hljs-comment\">// 根据地址路径读取文件</span>\n<span class=\"hljs-comment\">//readFIle是异步获取，readFileSync是同步获取</span>\nfs.readFile(<span class=\"hljs-string\">\'static/\'</span>+pathName,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(err){\n        <span class=\"hljs-comment\">// 文件不存在则跳转到404页面</span>\n        fs.readFile(<span class=\"hljs-string\">\'static/404.html\'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err404,data404</span>)</span>{\n            <span class=\"hljs-keyword\">if</span>(err1){\n                <span class=\"hljs-built_in\">console</span>.log(err404);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-comment\">// 状态码设置为404</span>\n            res.writeHead(<span class=\"hljs-number\">404</span>,{<span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"text/html;charset=utf-8\"</span>});\n            res.write(data404);\n            res.end();\n        })\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">var</span> mimeType=mime.setMime(extname);<span class=\"hljs-comment\">//获取每个请求的文件mime类型</span>\n    res.writeHead(<span class=\"hljs-number\">200</span>,{<span class=\"hljs-string\">\"Content-Type\"</span>:mimeType+<span class=\"hljs-string\">\";charset=utf-8\"</span>});\n    res.write(data);\n    res.end();\n})\n}).listen(<span class=\"hljs-number\">8001</span>);</code></pre>\n<p>......</p>', 1610352084395, NULL, 0, 0);
INSERT INTO `articles` VALUES (46, 8024, 'ejs模板引擎', 1, 1, '*', '<pre><code><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\'http\'</span>);\n<span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\'url\'</span>);\n<span class=\"hljs-keyword\">var</span> ejs = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\'ejs\'</span>);\n\nhttp.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(req, res)</span> </span>{\n<span class=\"hljs-keyword\">if</span>(req.url.indexOf(<span class=\"hljs-string\">\'favicon\'</span>) != <span class=\"hljs-number\">-1</span>){\n    res.end();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> userName=<span class=\"hljs-string\">\'来自后台的消息\'</span>;\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">list</span>=[<span class=\"hljs-string\">\'111\'</span>,<span class=\"hljs-string\">\'222\'</span>,<span class=\"hljs-string\">\'333\'</span>,<span class=\"hljs-string\">\'444\'</span>];\n<span class=\"hljs-keyword\">var</span> htmlStr=<span class=\"hljs-string\">\'&lt;h3&gt;我是标题&lt;/h3&gt;\'</span>;\n\nres.writeHead(<span class=\"hljs-number\">200</span>,{<span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"text/html;charset=utf-8\"</span>});\n<span class=\"hljs-keyword\">var</span> pathName=url.parse(req.url,<span class=\"hljs-keyword\">true</span>).pathname;<span class=\"hljs-comment\">///index.html?1123，使用url模块获取干净的地址路径</span>\n<span class=\"hljs-keyword\">if</span>(pathName == <span class=\"hljs-string\">\'/\'</span>){<span class=\"hljs-comment\">//默认跳转到index.html页面</span>\n    ejs.renderFile(<span class=\"hljs-string\">\'views/index.html\'</span>,{msg:userName,<span class=\"hljs-keyword\">list</span>:<span class=\"hljs-keyword\">list</span>,htmlStr:htmlStr},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err,data)</span></span>{\n        <span class=\"hljs-keyword\">if</span>(err){\n            console.log(err)\n        }\n        res.end(data);\n    })\n}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(pathName == <span class=\"hljs-string\">\'/register\'</span>){\n    <span class=\"hljs-keyword\">var</span> msg=<span class=\"hljs-string\">\'这是一个注册页面!\'</span>;\n    ejs.renderFile(<span class=\"hljs-string\">\'views/register.html\'</span>,{msg:msg},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err,data)</span></span>{\n        res.end(data);\n    })\n}\n\n}).listen(<span class=\"hljs-number\">8001</span>);\n\n<span class=\"hljs-comment\">/*\n1、引入ejs模块\n2、ejs.renderFile()读取模板并且传入参数\n*/</span>\n\n\n    <span class=\"hljs-comment\">//index.html页面</span>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"zh-CN\"</span>&gt;\n&lt;head&gt;\n&lt;meta charset=<span class=\"hljs-string\">\"utf-8\"</span>&gt;\n&lt;title&gt;首页&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;这是一个ejs模板<span class=\"hljs-number\">22</span>&lt;/h2&gt;\n&lt;h2&gt;&lt;%= msg%&gt;&lt;/h2&gt;\n&lt;%- htmlStr %&gt;\n&lt;br&gt;\n\n&lt;ul&gt;\n        &lt;% <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-keyword\">list</span>.length;i++){%&gt;\n                &lt;li&gt;&lt;%=<span class=\"hljs-keyword\">list</span>[i]%&gt;&lt;/li&gt;\n        &lt;% } %&gt;\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>......</p>', 1610352183208, NULL, 0, 0);
INSERT INTO `articles` VALUES (47, 8024, '路由 get post', 1, 1, '*', '<pre><code>var http = require(<span class=\"hljs-string\">\"http\"</span>);\nvar url = require(<span class=\"hljs-string\">\"url\"</span>);\nvar ejs = require(<span class=\"hljs-string\">\"ejs\"</span>);\nvar fs = require(<span class=\"hljs-string\">\"fs\"</span>);\n\nhttp.createServer(<span class=\"hljs-keyword\">function</span>(req, res) {\n<span class=\"hljs-keyword\">if</span>(req.url.indexOf(<span class=\"hljs-string\">\"favicon\"</span>) != <span class=\"hljs-number\">-1</span>){\n    res.<span class=\"hljs-keyword\">end</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n}\n\nvar methodType=req.<span class=\"hljs-keyword\">method</span>.toLowerCase();//获取传值类型，<span class=\"hljs-keyword\">get</span>或者是post\n\nres.writeHead(<span class=\"hljs-number\">200</span>,{\"Content-Type\":\"text/html;charset=utf-8\"});\nvar pathName=url.parse(req.url,<span class=\"hljs-keyword\">true</span>).pathname;///<span class=\"hljs-keyword\">index</span>.html?<span class=\"hljs-number\">1123</span>，使用url模块获取干净的地址路径\n\n<span class=\"hljs-keyword\">if</span>(pathName == <span class=\"hljs-string\">\"/\"</span>){//默认跳转到<span class=\"hljs-keyword\">login</span>.html页面\n    ejs.renderFile(<span class=\"hljs-string\">\"views/login.html\"</span>,{},<span class=\"hljs-keyword\">function</span>(err,data){\n        <span class=\"hljs-keyword\">if</span>(err){\n            console.log(err)\n        }\n        res.<span class=\"hljs-keyword\">end</span>(data);\n    })\n}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(pathName == <span class=\"hljs-string\">\"/dologin\"</span> &amp;&amp; methodType==<span class=\"hljs-string\">\"post\"</span>){\n    var postStr=<span class=\"hljs-string\">\"\"</span>;\n    req.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">\"data\"</span>,<span class=\"hljs-keyword\">function</span>(chunk){\n        postStr+=chunk;\n    })\n    req.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">\"end\"</span>,<span class=\"hljs-keyword\">function</span>(chunk){\n        console.log(postStr)\n        fs.appendFile(<span class=\"hljs-string\">\"login.txt\"</span>,postStr+<span class=\"hljs-string\">\"\n\"</span>,<span class=\"hljs-keyword\">function</span>(err,data){\n            <span class=\"hljs-keyword\">if</span>(err){\n                console.log(err);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n            console.log(<span class=\"hljs-string\">\"写入成功\"</span>)\n        });\n        res.<span class=\"hljs-keyword\">end</span>(<span class=\"hljs-string\">\"&lt;script&gt;alert(\"登陆成功\");history.back();&lt;/script&gt;\"</span>)\n    })\n}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(pathName == <span class=\"hljs-string\">\"/dologin\"</span>){\n    var <span class=\"hljs-keyword\">info</span>=url.parse(req.url,<span class=\"hljs-keyword\">true</span>);\n    <span class=\"hljs-keyword\">info</span>=<span class=\"hljs-type\">JSON</span>.parse(<span class=\"hljs-type\">JSON</span>.stringify(<span class=\"hljs-keyword\">info</span>));\n    ejs.renderFile(<span class=\"hljs-string\">\"views/dologin.html\"</span>,{query:<span class=\"hljs-keyword\">info</span>.query},<span class=\"hljs-keyword\">function</span>(err,data){\n        res.<span class=\"hljs-keyword\">end</span>(data);\n    })\n}\n\n}).<span class=\"hljs-keyword\">listen</span>(<span class=\"hljs-number\">8001</span>);\n\n<span class=\"hljs-comment\">/*\n1、post传值获取参数通过req.on()，类似流的方式，get传值通过url模块获取格式化之后的参数\n2、路由使用urk模块，根据地址栏的pathname进行判断\n*/</span>\n\n//<span class=\"hljs-keyword\">login</span>.html\n&lt;form id=\"dataForm\" <span class=\"hljs-keyword\">method</span>=\"post\" action=<span class=\"hljs-string\">\"/dologin\"</span>&gt;\n   &lt;<span class=\"hljs-keyword\">input</span> placeholder=<span class=\"hljs-string\">\"请输入账号\"</span> id=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-keyword\">value</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-type\">name</span>=<span class=\"hljs-string\">\"username\"</span> autocomplete=\"off\" maxlength=\"25\"&gt;\n   &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=\"password\" placeholder=<span class=\"hljs-string\">\"请输入密码\"</span> id=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-keyword\">value</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-type\">name</span>=<span class=\"hljs-string\">\"password\"</span> autocomplete=\"off\" maxlength=\"25\"&gt;\n   &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=\"submit\" id =<span class=\"hljs-string\">\"btn\"</span> <span class=\"hljs-keyword\">value</span>=\"登录\"&gt;\n&lt;/form&gt;</code></pre>\n<p>......</p>', 1610352220798, 1610352254996, 0, 0);
INSERT INTO `articles` VALUES (48, 8024, '模块化路由封装', 1, 1, '*', '<pre><code>将web服务器中的req和res作为参数传递到封装的函数中，利用obj[属性]的方式访问方法\n<span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'http\'</span>);\n<span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'url\'</span>);\n<span class=\"hljs-keyword\">var</span> router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'./module/router.js\'</span>);\n\nhttp.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{\n<span class=\"hljs-keyword\">if</span>(req.url.indexOf(<span class=\"hljs-string\">\'favicon\'</span>) != <span class=\"hljs-number\">-1</span>){\n    res.end();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\nres.writeHead(<span class=\"hljs-number\">200</span>,{<span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"text/html;charset=utf-8\"</span>});\n<span class=\"hljs-keyword\">var</span> pathName=url.parse(req.url,<span class=\"hljs-literal\">true</span>).pathname.replace(<span class=\"hljs-string\">\'/\'</span>,<span class=\"hljs-string\">\'\'</span>);\n<span class=\"hljs-comment\">// 封装的路由函数</span>\n<span class=\"hljs-keyword\">try</span> {\n    router[pathName](req,res);\n} <span class=\"hljs-keyword\">catch</span>(e) {\n    router[<span class=\"hljs-string\">\'home\'</span>](req,res);\n}\nres.end();\n}).listen(<span class=\"hljs-number\">8001</span>);\n<span class=\"hljs-comment\">//router.js</span>\n<span class=\"hljs-keyword\">var</span> ejs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'ejs\'</span>);\n<span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'url\'</span>);\n\n<span class=\"hljs-keyword\">var</span> router={\n<span class=\"hljs-attr\">home</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\n    res.end(<span class=\"hljs-string\">\'首页\'</span>);\n},\n<span class=\"hljs-attr\">login</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\n    ejs.renderFile(<span class=\"hljs-string\">\'./views/login.html\'</span>,{},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>)</span>{\n        res.end(data);\n    })\n},\n<span class=\"hljs-attr\">dologin</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> info=url.parse(req.url,<span class=\"hljs-literal\">true</span>);\n    info=<span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(info));\n    ejs.renderFile(<span class=\"hljs-string\">\'./views/dologin.html\'</span>,{<span class=\"hljs-attr\">query</span>:info.query},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>)</span>{\n        res.end(data);\n    })\n}\n}\n\n<span class=\"hljs-built_in\">module</span>.exports=router;</code></pre>\n<p>......</p>', 1610352422540, NULL, 0, 0);
INSERT INTO `articles` VALUES (49, 8024, '仿express路由封装', 1, 1, '*', '<pre><code><span class=\"hljs-keyword\">var</span> http=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'http\'</span>);\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">url</span>=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'url\'</span>);\n<span class=\"hljs-keyword\">var</span> G={};\n\n<span class=\"hljs-comment\">//定义方法开始结束</span>\n<span class=\"hljs-keyword\">var</span> app=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\n<span class=\"hljs-keyword\">var</span> pathname=<span class=\"hljs-built_in\">url</span>.parse(req.url).pathname;\n<span class=\"hljs-keyword\">if</span>(!pathname.endsWith(<span class=\"hljs-string\">\'/\'</span>)){\n    pathname=pathname+<span class=\"hljs-string\">\'/\'</span>;\n}\n<span class=\"hljs-keyword\">if</span>(G[pathname]){\n    G[pathname](req,res);  <span class=\"hljs-comment\">/*执行注册的方法*/</span>\n}<span class=\"hljs-title\">else</span>{\n    res.end(<span class=\"hljs-string\">\'no router\'</span>);\n}\n}\n\n<span class=\"hljs-comment\">//定义一个get方法。功能：注册方法</span>\napp.get=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">string,callback</span>)</span>{\n<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">string</span>.endsWith(<span class=\"hljs-string\">\'/\'</span>)){\n    <span class=\"hljs-built_in\">string</span>=<span class=\"hljs-built_in\">string</span>+<span class=\"hljs-string\">\'/\'</span>;\n}\n<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">string</span>.startsWith(<span class=\"hljs-string\">\'/\'</span>)){\n    <span class=\"hljs-built_in\">string</span>=<span class=\"hljs-string\">\'/\'</span>+<span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-comment\">//路径格式修改为：\'/login/\'</span>\nG[<span class=\"hljs-built_in\">string</span>]=callback;\n}\n\n<span class=\"hljs-comment\">//只有有请求 就会触发app这个方法</span>\nhttp.createServer(app).listen(<span class=\"hljs-number\">3000</span>);\n\n<span class=\"hljs-comment\">//注册login这个路由（方法）</span>\napp.get(<span class=\"hljs-string\">\'login\'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\n         <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'login\'</span>);\n         res.end(<span class=\"hljs-string\">\'login\'</span>);\n})\n\napp.get(<span class=\"hljs-string\">\'register\'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req,res</span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'register\'</span>);\nres.end(<span class=\"hljs-string\">\'register\'</span>);\n})</code></pre>\n<p>......</p>', 1610352473181, NULL, 0, 0);
INSERT INTO `articles` VALUES (50, 8024, 'React 基础笔记', 1, 1, '*', '<pre><code>1.开发环境的搭建（两种方法）\n    1. 1、必须要安装<span class=\"hljs-string\">nodejs </span>    注意：安装<span class=\"hljs-string\">nodejs稳</span>定版本     <span class=\"hljs-string\">nodejs版</span>本:<span class=\"hljs-string\">v8.</span><span class=\"hljs-string\">11.</span>2            <span class=\"hljs-string\">npm版</span>本:<span class=\"hljs-string\">v5.</span>6.0\n\n   2.安装脚手架工具   （单文件组件项目生成工具）   只需要安装一次\n\n          <span class=\"hljs-string\">npm </span><span class=\"hljs-string\">install </span>-g <span class=\"hljs-built_in\">create-react-app</span>   /  <span class=\"hljs-string\">cnpm </span><span class=\"hljs-string\">install </span>-g <span class=\"hljs-built_in\">create-react-app</span>\n\n   3.创建项目   （可能创建多次）\n\n          找到项目要创建的目录：\n\n          <span class=\"hljs-built_in\">create-react-app</span> <span class=\"hljs-string\">reactdemo\n</span>\n   4.<span class=\"hljs-string\">cd </span> 到项目里面\n\n          <span class=\"hljs-string\">cd </span> <span class=\"hljs-string\">reactdemo\n</span>\n          <span class=\"hljs-string\">npm </span><span class=\"hljs-string\">start </span>            <span class=\"hljs-string\">yarn </span><span class=\"hljs-string\">start运</span>行项目\n\n          <span class=\"hljs-string\">npm </span><span class=\"hljs-string\">run </span><span class=\"hljs-string\">build </span>        <span class=\"hljs-string\">yarn </span><span class=\"hljs-string\">build </span>生成项目\n    2.1、必须要安装<span class=\"hljs-string\">nodejs </span>    注意：安装<span class=\"hljs-string\">nodejs稳</span>定版本      <span class=\"hljs-string\">nodejs版</span>本:<span class=\"hljs-string\">v8.</span><span class=\"hljs-string\">11.</span>2           <span class=\"hljs-string\">npm版</span>本:<span class=\"hljs-string\">v5.</span>6.0\n\n   2.安装脚手架工具并创建项目\n\n          找到项目要创建的目录执行：\n\n          <span class=\"hljs-string\">npx </span><span class=\"hljs-built_in\">create-react-app</span> <span class=\"hljs-string\">reactdemo\n</span>\n   4.<span class=\"hljs-string\">cd </span> 到项目里面\n\n          <span class=\"hljs-string\">cd </span> <span class=\"hljs-string\">reactdemo\n</span>\n          <span class=\"hljs-string\">npm </span><span class=\"hljs-string\">start </span> 运行项目（调试）\n\n          <span class=\"hljs-string\">npm </span><span class=\"hljs-string\">run </span><span class=\"hljs-string\">build </span>生成项目（发布）\n2.两种创建组件的方式（后期学习<span class=\"hljs-string\">hooks）</span>\n第一种是采用函数式的方式（无状态的时候可以使用该方式）：\n<span class=\"hljs-string\">function </span><span class=\"hljs-string\">demo（</span>））{\n    //这种方式不存在<span class=\"hljs-string\">this关</span>键字\n    <span class=\"hljs-string\">return </span>//标签\n    无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个<span class=\"hljs-string\">render方</span>法，大大的增强了编写一个组件的便利，除此之外无状态组件还有以下几个显著的特点：\n\n组件不会被实例化，整体渲染性能得到提升\n因为组件被精简成一个<span class=\"hljs-string\">render方</span>法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无化过程也就不需要分配多余的内存，从而性能得到一定的提升。\n组件不能访问<span class=\"hljs-string\">this对</span>象\n无状态组件由于没有实例化过程，所以无法访问组件<span class=\"hljs-string\">this中</span>的对象，例如：<span class=\"hljs-string\">this.</span><span class=\"hljs-string\">ref、</span><span class=\"hljs-string\">this.</span><span class=\"hljs-string\">state等</span>均不能访问。若想访问就不能使用这种形式来创建组件\n组件无法访问生命周期的方法\n因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。\n无状态组件只能访问输入的<span class=\"hljs-string\">props，</span>同样的<span class=\"hljs-string\">props会</span>得到同样的渲染结果，不会有副作用\n无状态组件被鼓励在大型项目中尽可能以简单的写法来分割原本庞大的组件，未来<span class=\"hljs-string\">React也</span>会这种面向无状态组件在譬如无意义的检查和内存分配领域进行一系列优化，所以只要有可能，尽量使用无状态组件\n}\n第二种方式采用类声明组件（有状态的组件使用）\n<span class=\"hljs-string\">class </span><span class=\"hljs-string\">demo </span><span class=\"hljs-string\">expands </span><span class=\"hljs-string\">React.</span><span class=\"hljs-string\">Component </span>{\n        //构造函数 定义在组件原型的初始化变量\n          <span class=\"hljs-string\">constructor(</span><span class=\"hljs-string\">props)</span> {\n    <span class=\"hljs-string\">super(</span><span class=\"hljs-string\">props)</span>;\n\n    // 设置 <span class=\"hljs-string\">initial </span><span class=\"hljs-string\">state\n</span>    <span class=\"hljs-string\">this.</span><span class=\"hljs-string\">state </span>= {\n        <span class=\"hljs-string\">text:</span> <span class=\"hljs-string\">props.</span><span class=\"hljs-string\">initialValue </span>|| <span class=\"hljs-string\">\'placeholder\'</span>\n    };\n\n    // <span class=\"hljs-string\">ES6 </span>类中函数必须手动绑定\n    <span class=\"hljs-string\">this.</span><span class=\"hljs-string\">handleChange </span>= <span class=\"hljs-string\">this.</span><span class=\"hljs-string\">handleChange.</span><span class=\"hljs-string\">bind(</span><span class=\"hljs-string\">this)</span>;\n}\n    <span class=\"hljs-string\">handleChange(</span><span class=\"hljs-string\">event)</span> {\n    <span class=\"hljs-string\">this.</span><span class=\"hljs-string\">setState(</span>{\n        <span class=\"hljs-string\">text:</span> <span class=\"hljs-string\">event.</span><span class=\"hljs-string\">target.</span><span class=\"hljs-string\">value\n</span>    });\n}\n\n<span class=\"hljs-string\">render(</span>) {\n    <span class=\"hljs-string\">return </span>(\n        &lt;<span class=\"hljs-string\">div&gt;</span>\n            <span class=\"hljs-string\">Type </span><span class=\"hljs-string\">something:</span>\n            &lt;<span class=\"hljs-string\">input </span><span class=\"hljs-string\">onChange=</span>{<span class=\"hljs-string\">this.</span><span class=\"hljs-string\">handleChange}</span>\n           <span class=\"hljs-string\">value=</span>{<span class=\"hljs-string\">this.</span><span class=\"hljs-string\">state.</span><span class=\"hljs-string\">text}</span> /&gt;\n        &lt;/<span class=\"hljs-string\">div&gt;</span>\n    );\n}\n}</code></pre>\n<p>......</p>', 1610939473610, NULL, 0, 1);
INSERT INTO `articles` VALUES (51, 8024, 'react-修改状态-setState', 1, 1, '*', '<pre><code>类定义的组件创建<span class=\"hljs-keyword\">state</span>状态并修改\nclass TodoItem extends React.Component{\nconstructor(props){\n    super(props);\n    this.<span class=\"hljs-keyword\">state</span> = { // define this.<span class=\"hljs-keyword\">state</span> <span class=\"hljs-keyword\">in</span> constructor\n        isEditing: false\n    } \n}\nrender(){\n    return <span class=\"hljs-variable\">&lt;div&gt;</span>&lt;/div&gt;\n}\n}\n修改<span class=\"hljs-keyword\">state</span>属性的值\n通过this.<span class=\"hljs-built_in\">set</span>State({isEditing:true})的方式</code></pre>\n<p>......</p>', 1610939847913, NULL, 0, 0);
INSERT INTO `articles` VALUES (52, 8024, 'react-props', 1, 1, '*', '<pre><code>state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据\n基本用法：\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">\"测试props\"</span>/&gt;</span>   data就是通过props来传递参数的\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>React 实例<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.staticfile.org/react/16.4.0/umd/react.development.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"example\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\">\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n\nrender() {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        请输入邮箱：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.props.handleEmail}/</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n}\n}\n\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n<span class=\"hljs-keyword\">constructor</span>(props) {\n    <span class=\"hljs-keyword\">super</span>(props);\n    <span class=\"hljs-keyword\">this</span>.state = {\n        <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\' \'</span>\n    }\n}\n\nhandleEmail = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">this</span>.setState({\n        <span class=\"hljs-attr\">email</span>: event.target.value\n    });\n}\n\nrender() {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>用户邮箱：{this.state.email}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">handleEmail</span>=<span class=\"hljs-string\">{this.handleEmail}/</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n}\n}\nReactDOM.render(\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Parent</span> /&gt;</span></span>,\n        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'example\'</span>)\n);\n\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n<p>......</p>', 1611019255017, NULL, 0, 0);
INSERT INTO `articles` VALUES (53, 8024, 'react-props字段限制', 1, 1, '*', '<pre><code>根据业务需求需要规定props传递的数据有固定的的类型\nPerson.propTypes = {\n    <span class=\"hljs-attribute\">name</span>:PropTypes<span class=\"hljs-variable\">.string</span><span class=\"hljs-variable\">.isRequired</span>,限制name为字符串，并且必须有数据\n    age:PropTypes<span class=\"hljs-variable\">.number</span>\n    speak:PropTypes<span class=\"hljs-variable\">.func</span> 限制speak为函数\n}\n可以规定prop默认的数据属性值\nPerson<span class=\"hljs-variable\">.defaultProps</span> = {\n    age:18\n}\nMyComponent<span class=\"hljs-variable\">.propTypes</span> = {\n// 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的\n     optionalArray: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.array</span>,\noptionalBool: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.bool</span>,\noptionalFunc: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.func</span>,\noptionalNumber: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.number</span>,\noptionalObject: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.object</span>,\noptionalString: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.string</span>,\n\n// 可以被渲染的对象 numbers, strings, elements 或 array\noptionalNode: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.node</span>,\n\n//  React 元素\noptionalElement: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.element</span>,\n\n// 用 JS 的 instanceof 操作符声明 prop 为类的实例。\noptionalMessage: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.instanceOf</span>(Message),\n\n// 用 enum 来限制 prop 只接受指定的值。\noptionalEnum: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.oneOf</span>([\"News\", \"Photos\"]),\n\n// 可以是多个对象类型中的一个\noptionalUnion: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.oneOfType</span>([\n  React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.string</span>,\n  React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.number</span>,\n  React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.instanceOf</span>(Message)\n]),\n\n// 指定类型组成的数组\noptionalArrayOf: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.arrayOf</span>(React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.number</span>),\n\n// 指定类型的属性构成的对象\noptionalObjectOf: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.objectOf</span>(React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.number</span>),\n\n// 特定 shape 参数的对象\noptionalObjectWithShape: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.shape</span>({\n  color: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.string</span>,\n  fontSize: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.number</span>\n}),\n\n// 任意类型加上 `isRequired` 来使 prop 不可空。\nrequiredFunc: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.func</span><span class=\"hljs-variable\">.isRequired</span>,\n\n// 不可空的任意类型\nrequiredAny: React<span class=\"hljs-variable\">.PropTypes</span><span class=\"hljs-variable\">.any</span><span class=\"hljs-variable\">.isRequired</span>,\n\n// 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console<span class=\"hljs-variable\">.warn</span>` 或抛异常，因为这样 `oneOfType` 会失效。\ncustomProp: function(props, propName, componentName) {\n  if (!/matchme/<span class=\"hljs-variable\">.test</span>(props[propName])) {\n    return new Error(\"Validation failed!\");\n  }\n}</code></pre>\n<p>......</p>', 1611019578394, 1611019650588, 0, 0);
INSERT INTO `articles` VALUES (54, 8024, '函数的柯里化（高阶函数）', 1, 1, '*', '<pre><code>把接收多个参数的函数变换成接收一个单一参数的函数（单一参数为多个参数中的第一个）函数柯里化思想：一个JS预处理的思想，降低通用性，提高适用性\n参数复用    需要输入多个参数，最终只需输入一个，其余通过<span class=\"hljs-built_in\">arguments</span>来获取\n提前返回    避免重复去判断某一条件是否符合，不符合则<span class=\"hljs-keyword\">return</span> 不再继续执行下面的操作\n延迟执行    避免重复的去执行程序，等真正需要结果的时候再执行\n利用函数执行可以形成一个不销毁的私有作用域，把预先处理的内容都存在这个不销毁的作用域里面，并且返回一个小函数，以后要执行的就是这个小函数\n例如：<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a</span>)</span>{\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">another</span>(<span class=\"hljs-params\">b</span>)</span>{\n         <span class=\"hljs-keyword\">return</span> a+b;\n     }\n }\n那么怎么调用该函数呢？\nsum（a）(b)\n实际应用\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Login</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>{\n        <span class=\"hljs-comment\">//初始化状态</span>\n        state = {\n            <span class=\"hljs-attr\">username</span>:<span class=\"hljs-string\">\'\'</span>, <span class=\"hljs-comment\">//用户名</span>\n            <span class=\"hljs-attr\">password</span>:<span class=\"hljs-string\">\'\'</span> <span class=\"hljs-comment\">//密码</span>\n        }\n\n        <span class=\"hljs-comment\">//保存表单数据到状态中</span>\n        saveFormData = <span class=\"hljs-function\">(<span class=\"hljs-params\">dataType</span>)=&gt;</span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>)=&gt;</span>{\n                <span class=\"hljs-keyword\">this</span>.setState({[dataType]:event.target.value})\n            }\n        }\n\n        <span class=\"hljs-comment\">//表单提交的回调</span>\n        handleSubmit = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>)=&gt;</span>{\n            event.preventDefault() <span class=\"hljs-comment\">//阻止表单提交</span>\n            <span class=\"hljs-keyword\">const</span> {username,password} = <span class=\"hljs-keyword\">this</span>.state\n            alert(<span class=\"hljs-string\">`你输入的用户名是：<span class=\"hljs-subst\">${username}</span>,你输入的密码是：<span class=\"hljs-subst\">${password}</span>`</span>)\n        }\n        render(){\n            <span class=\"hljs-keyword\">return</span>(\n                <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{this.handleSubmit}</span>&gt;</span>\n                    用户名：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.saveFormData(</span>\'<span class=\"hljs-attr\">username</span>\')} <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span>/&gt;</span>\n                    密码：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.saveFormData(</span>\'<span class=\"hljs-attr\">password</span>\')} <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span>/&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\n            )\n        }\n    }\n    <span class=\"hljs-comment\">//渲染组件</span>\n    ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Login</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'test\'</span>))\n\n    高阶函数：如果一个函数符合下面<span class=\"hljs-number\">2</span>个规范中的任何一个，那该函数就是高阶函数。\n                                <span class=\"hljs-number\">1.</span>若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。\n                                <span class=\"hljs-number\">2.</span>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。\n                                常见的高阶函数有：<span class=\"hljs-built_in\">Promise</span>、setTimeout、arr.map()等等\n\n                函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 </code></pre>\n<p>......</p>', 1611105055798, NULL, 0, 0);

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NULL DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  `reply_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `reply_comment_id` int(11) NULL DEFAULT NULL,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `time` bigint(15) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comments
-- ----------------------------

-- ----------------------------
-- Table structure for tag_links
-- ----------------------------
DROP TABLE IF EXISTS `tag_links`;
CREATE TABLE `tag_links`  (
  `tid` int(11) NOT NULL,
  `aid` int(11) NOT NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tag_links
-- ----------------------------
INSERT INTO `tag_links` VALUES (2, 43);

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tags
-- ----------------------------
INSERT INTO `tags` VALUES (2, 'NODE');

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `root` tinyint(2) NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `website` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `reminder` tinyint(2) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8025 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES (8024, 'hezhilong', '58585959@qq.com', '7c4a8d09ca3762af61e59520943dc26494f8941b', 0, 'avatar.jpg', '', 0);

-- ----------------------------
-- Table structure for visitors
-- ----------------------------
DROP TABLE IF EXISTS `visitors`;
CREATE TABLE `visitors`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `website` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `reminder` tinyint(2) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8057 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visitors
-- ----------------------------
INSERT INTO `visitors` VALUES (8056, 'hezhilong', '58585959@qq.com', '', 'avatar.jpg', 0);

SET FOREIGN_KEY_CHECKS = 1;
